---
title: Using R to Scrape and Analyse Data - Part 1 - Pulling Draft Pick Data
author: Christopher Campbell
date: '2021-03-13'
slug: []
categories:
  - R
  - Blog
  - Learning
tags: []
draft: FALSE
---

R is programming language used for statistical analysis and graphing. I've been using it for
a few months and found it's got a really impressive ecosystem of tools and libraries. My
main interest in using it is to make some sense of the masses of data produced by the NFL to
try and have a less terrible fantasy football team.

One of the first things I wanted to do in R was scrape some useful data from the web to analyse. 
Let's walk through a quick example of how to pull NFL draft pick data from a webpage and parse
it into a clean usable format. Here's some code which pulls the 2020 NFL Draft data from Pro Football Reference.

```{R echo=TRUE, message=FALSE, warning=FALSE}
library(rvest)
library(tidyverse)
library(janitor)
library(xml2)

url <- "https://www.pro-football-reference.com/years/2020/draft.htm"
draft_html <- xml2::read_html(url)

final_table <- draft_html %>%
  rvest::html_nodes("table#drafts") %>%
  rvest::html_table() %>%
  .[[1]] %>%
  janitor::row_to_names(row_number = 1) %>%
  select(Rnd, Pick, Tm, Player, Pos, Age, "College/Univ") %>%
  dplyr::mutate(Rnd = as.integer(Rnd),
                    Pick = as.integer(Pick),
                    Age = as.integer(Age))
head(final_table, 5)
```

Don't worry if the code here looks a bit daunting, it basically breaks down to a few simple steps
chained together. 

The steps here are basically:
 - Pull the HTML from a webpage
 - extract a table from the HTML and load it into a dataframe
 - clean the data and make sure the field names are usable
 - pick off the fields which we actually think will be useful
 - print the first 5 (just to show it worked)

### Grab the HTML
First up, we need to find a webpage with the data we want. One quick point of etiquette I
think it's always worth noting; check a site's robots.txt before scraping any data. This defines which user agents and routes are allowed/disallowed. I won't go into the ins and outs of it here but there's loads of good guides online on how to check a robots.txt file.

```{R}
url <- "https://www.pro-football-reference.com/years/2020/draft.htm"
draft_html <- xml2::read_html(url)
print(draft_html)
```

It's not immediately obvious from what was printed out there but we've basically pulled the html from the webpage
into a variable (`draft_html`) that we can manipulate and use in the code after.

### Extract the HTML table

This is bit that rvest does really well; picking off the right HTML node and parsing it into something usable.
The html_nodes method lets you pick nodes from the HTML using CSS selectors just like you would in Javascript for a
webpage. In this case `table#drafts` means we are wanting a "table" element with the ID "drafts". Once we have the right nodes, html_table() takes the nodes and turns them into a tibble (basically a simple dataframe).

```{R}
draft_table <- draft_html %>%
  rvest::html_nodes("table#drafts") %>%
  rvest::html_table() %>%
  .[[1]]
head(draft_table)
```

`[[1]]` above is basically because these methods handle lists of nodes and lists of tibbles and we want to pick off the first one to use. If you look at the output above, it's starting to look like draft data. 

### Get the row names right

One tripping hazard though is that if you look closely, the first row which looks like headers is actually being treated as rows of data. [Janitor](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html#elevate-column-names-stored-in-a-data.frame-row) is a package we can use to clean up the data, in this case we want to elevate the first row to being treated as a header row and using the values as the column names.

```{R message=FALSE, warning=FALSE}
draft_table <- draft_html %>%
  rvest::html_nodes("table#drafts") %>%
  rvest::html_table() %>%
  .[[1]] %>%
  janitor::row_to_names(row_number = 1)
head(draft_table)
```

### Select the right data

There's quite a lot of data there for each player that for this case we probably don't really need so let's pick off the most relevant stuff so we have a nice valuable subset of data. I just really want to know who was drafted at each pick and by what team. 

A nice way to do this is the select method from dplyr. In true dplyr fashion, it pretty much does what it says on the tin; allowing us to select which columns we want to keep.

```{R message=FALSE, warning=FALSE}
draft_table <- draft_html %>%
  rvest::html_nodes("table#drafts") %>%
  rvest::html_table() %>%
  .[[1]] %>%
  janitor::row_to_names(row_number = 1) %>%
  select(Rnd, Pick, Tm, Player, Pos, Age, "College/Univ")

head(draft_table)
```

### Tweaking data types

You might not see from the printed tables but some of the columns above which are supposed to represent numeric values are of type "chr". This basically means that the field is treated as a text string rather than a number. It looks fine now but when you try and run mathematical functions against them it will trip you up. For example "10" is less than "2" when comparing strings. So, if we want to be able to sort by age or pick the players taken in the first 3 rounds, we'll need to convert those fields to a numeric type. R supports integers or numeric (basically a double or integer) but for our cases here I think integer will do fine.

The [mutate](https://dplyr.tidyverse.org/reference/mutate.html) method can be used for this. There are some libraries which support less verbose ways of doing this but I quite like how clear using the `mutate` method is. 

```{R message=FALSE, warning=FALSE}
draft_table <- draft_table %>% 
      dplyr::mutate(Rnd = as.integer(Rnd),
                    Pick = as.integer(Pick),
                    Age = as.integer(Age))
# Now we can use the integer fields in mathematical comparisons. For example:
early_round_rbs <- draft_table %>%
  dplyr::filter(Rnd <= 3) %>%
  dplyr::filter(Pos == 'RB')
print(early_round_rbs)
```
Now we can use the integer fields in mathematical comparisons. For example:
```{R message=FALSE, warning=FALSE}

early_round_rbs <- draft_table %>%
  dplyr::filter(Rnd <= 3) %>%
  dplyr::filter(Pos == 'RB')
print(early_round_rbs)
```

`dplyr::filter(Rnd <= 3)` does pretty much what you'd expect, filtering the dataset based on some conditions you pass in. If the row has a value of `Rnd` which is less than or equal to 3, the row is included and passed to the next step, otherwise it is discarded. 

### Next

Next post, I'll try and do something useful with the data. Maybe we can pull the last 10 years' draft picks and find trends in the data. 