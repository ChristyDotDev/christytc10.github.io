receiving_fumbles_lost, receiving_air_yards, receiving_yards_after_catch, receiving_first_downs,
receiving_epa, receiving_2pt_conversions, special_teams_tds, fantasy_points, fantasy_points_ppr ) %>%
group_by(player_id, season) %>%
summarise(name = first(player_name), season_rush_att = (sum(carries)))
View(yearly_stats)
yearly_stats <- weekly_stats %>%
select(player_id, player_name, recent_team, season, week, completions, attempts,
passing_yards, passing_tds, interceptions, sacks, sack_fumbles_lost, passing_air_yards,
passing_yards_after_catch, passing_first_downs, passing_epa, passing_2pt_conversions,
dakota, carries, rushing_yards, rushing_tds, rushing_fumbles_lost, rushing_first_downs,
rushing_epa, rushing_2pt_conversions, receptions, targets, receiving_yards, receiving_tds,
receiving_fumbles_lost, receiving_air_yards, receiving_yards_after_catch, receiving_first_downs,
receiving_epa, receiving_2pt_conversions, special_teams_tds, fantasy_points, fantasy_points_ppr ) %>%
group_by(player_id, season) %>%
summarise(name = first(player_name), season_rush_att = sum(carries), season_rush_yds=sum(rushing_yards))
View(yearly_stats)
year = 2020
url <- glue::glue("https://www.pro-football-reference.com/years/{year}/draft.htm")
draft_html <- xml2::read_html(url)
draft_table <- draft_html %>%
rvest::html_nodes("table#drafts")
library(rvest)
library(tidyverse)
library(janitor)
library(xml2)
year = 2020
url <- glue::glue("https://www.pro-football-reference.com/years/{year}/draft.htm")
draft_html <- xml2::read_html(url)
draft_table <- draft_html %>%
rvest::html_nodes("table#drafts")
View(draft_table)
draft_table[[1]]
View(draft_table[[1]])
View(xml_attrs(draft_table[[1]]))
xml_child(draft_table[[1]], 4)
View(xml_child(draft_table[[1]], 4))
View(xml_child(xml_child(draft_table[[1]], 4), 3))
View(xml_child(xml_child(xml_child(draft_table[[1]], 4), 3), 8))
View(xml_child(xml_child(xml_child(draft_table[[1]], 4), 3), 8))
setwd("~/christytc10.github.io")
setwd("~/christytc10.github.io/source")
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
library(shiny)
library(ffscrapr)
library(tidyverse)
library(ggplot2)
library(ggrepel)
#remotes::install_github("dynastyprocess/fpscrapr")
library(fpscrapr)
player_counts <- tibble(pos = c("QB","RB","WR","TE"), count = c(2,3,3,2))
fpRanks <- fp_rankings(page = "consensus-cheatsheets", sport = "nfl") %>%
mutate(pos_ecr = as.integer(gsub(".*?([0-9]+).*", "\\1", pos_rank))  ) %>%
select(player_id, pos_ecr)
dynEcr <- fp_rankings(page = "dynasty-overall", sport = "nfl") %>%
mutate(dyn_pos_ecr = as.integer(gsub(".*?([0-9]+).*", "\\1", pos_rank))  ) %>%
select(player_id, dyn_pos_ecr)
sleeper_league_id <- 649923060580864000
player_values <- dp_values("values-players.csv") %>%
left_join(dp_playerids(), by = c("fp_id" = "fantasypros_id"))
league <- sleeper_connect(season = 2021, league_id = sleeper_league_id)
rosters <- ff_rosters(league) %>%
left_join(player_values, by = c("player_id"="sleeper_id")) %>%
mutate(fp_id = as.integer(fp_id)) %>%
left_join(fpRanks, by = c("fp_id"="player_id")) %>%
left_join(dynEcr, by = c("fp_id"="player_id")) %>%
select(player_id, franchise_name, player_name, team, age, pos.x, value_2qb, pos_ecr, dyn_pos_ecr)
free_agents <- sleeper_players() %>%
filter(pos %in% player_counts$pos) %>%
left_join(player_values, by = c("player_id"="sleeper_id")) %>%
select(player_id, player_name, pos.x, age, value_2qb, ecr_2qb, ecr_pos) %>%
filter(!is.na(value_2qb)) %>%
filter(!player_id %in% rosters$player_id)
teams <- unique(rosters$franchise_name)
ui <- fluidPage(
titlePanel("Dynasty Positional Value vs Rest of League"),
verticalLayout(
HTML("<h4>Total value in position on roster (with league min and max)</h4>"),
selectInput("team", "Team", choices = teams, multiple = FALSE),
checkboxInput("startersOnly", "Starters Only", value = FALSE),
plotOutput("graph"),
HTML("<h4>Bench players in the league who could start for you this year</h4>"),
tableOutput("tradeTargets"),
HTML("<h4>Top valued bench players (Season ECR and Dynasty ECR is outside starting range)</h4>"),
tableOutput("tradeAway"),
HTML("<h4>Top valued Free agents</h4>"),
tableOutput("topFreeAgents")
)
)
server <- function(input, output) {
rosters <- rosters %>%
left_join(player_counts, by = c("pos.x" = "pos")) %>%
group_by(pos.x) %>%
mutate(league_pos_rank = rank(desc(value_2qb), na.last = TRUE, ties.method= "min")) %>%
ungroup() %>%
mutate(pos_starters_league = count*length(teams)) %>%
mutate(pos_starters_team = count) %>%
group_by(pos.x,franchise_name) %>%
mutate(roster_pos_rank = rank(desc(value_2qb), na.last = TRUE, ties.method= "min"))
players_included <- rosters
output$graph <- renderPlot({
if(input$startersOnly){
players_included <- players_included %>%
filter(roster_pos_rank <= count)
}
roster_pos_values <- players_included %>%
summarise(pos_value=sum(value_2qb, na.rm=TRUE))
selected_roster <- roster_pos_values %>%
filter(franchise_name == input$team)
worst <- roster_pos_values %>%
group_by(pos.x) %>%
summarise(franchise_name="Worst", pos_value=min(pos_value))
best <- roster_pos_values %>%
group_by(pos.x) %>%
summarise(franchise_name="Best", pos_value=max(pos_value))
ggplot(selected_roster) +
geom_bar( aes(x=pos.x, y=pos_value), stat="identity", fill="skyblue", alpha=0.7) +
xlab("Position") + ylab("Total Value") +
geom_errorbar( aes(x=worst$pos.x, ymin=worst$pos_value, ymax=best$pos_value), width=0.4, colour="orange", alpha=0.9, size=1.3)
})
output$tradeTargets = renderTable({
rosterRanks <- rosters %>%
filter(franchise_name == input$team) %>%
group_by(pos.x) %>%
filter(roster_pos_rank <= count) %>%
summarise(worstStarter=max(pos_ecr))
potentialTradeTargets <- rosters %>%
left_join(rosterRanks, by = c("pos.x" = "pos.x")) %>%
filter(franchise_name != input$team) %>%
filter(pos_ecr <= pos_starters_league) %>%
filter(roster_pos_rank > pos_starters_team) %>%
filter(pos_ecr < worstStarter) %>%
select(franchise_name, player_name, team, age, value_2qb, pos_ecr,dyn_pos_ecr)
return(potentialTradeTargets)
})
output$tradeAway = renderTable({
rosterRanks <- rosters %>%
filter(franchise_name == input$team) %>%
filter(dyn_pos_ecr > pos_starters_league) %>%
filter(pos_ecr > pos_starters_league) %>%
arrange(-value_2qb) %>%
head(5) %>%
select(franchise_name, player_name, team, age, value_2qb, pos_ecr,dyn_pos_ecr)
return(rosterRanks)
})
output$topFreeAgents = renderTable({
topFreeAgents <- free_agents %>%
arrange(-value_2qb) %>%
head(10)
return(topFreeAgents)
})
}
shinyApp(ui = ui, server = server)
blogdown:::serve_site()
blogdown::build_site()
library(shiny)
library(ffscrapr)
library(tidyverse)
library(ggrepel)
#remotes::install_github("dynastyprocess/fpscrapr")
library(fpscrapr)
player_counts <- tibble(pos = c("QB","RB","WR","TE"), count = c(2,3,3,2))
fpRanks <- fp_rankings(page = "consensus-cheatsheets", sport = "nfl") %>%
mutate(pos_ecr = as.integer(gsub(".*?([0-9]+).*", "\\1", pos_rank))  ) %>%
select(player_id, pos_ecr)
dynEcr <- fp_rankings(page = "dynasty-overall", sport = "nfl") %>%
mutate(dyn_pos_ecr = as.integer(gsub(".*?([0-9]+).*", "\\1", pos_rank))  ) %>%
select(player_id, dyn_pos_ecr)
sleeper_league_id <- 649923060580864000
player_values <- dp_values("values-players.csv") %>%
left_join(dp_playerids(), by = c("fp_id" = "fantasypros_id"))
league <- sleeper_connect(season = 2021, league_id = sleeper_league_id)
rosters <- ff_rosters(league) %>%
left_join(player_values, by = c("player_id"="sleeper_id")) %>%
mutate(fp_id = as.integer(fp_id)) %>%
left_join(fpRanks, by = c("fp_id"="player_id")) %>%
left_join(dynEcr, by = c("fp_id"="player_id")) %>%
select(player_id, franchise_name, player_name, team, age, pos.x, value_2qb, pos_ecr, dyn_pos_ecr)
free_agents <- sleeper_players() %>%
filter(pos %in% player_counts$pos) %>%
left_join(player_values, by = c("player_id"="sleeper_id")) %>%
select(player_id, player_name, pos.x, age, value_2qb, ecr_2qb, ecr_pos) %>%
filter(!is.na(value_2qb)) %>%
filter(!player_id %in% rosters$player_id)
teams <- unique(rosters$franchise_name)
ui <- fluidPage(
titlePanel("Dynasty Positional Value vs Rest of League"),
verticalLayout(
HTML("<h4>Total value in position on roster (with league min and max)</h4>"),
selectInput("team", "Team", choices = teams, multiple = FALSE),
checkboxInput("startersOnly", "Starters Only", value = FALSE),
plotOutput("graph"),
HTML("<h4>Bench players in the league who could start for you this year</h4>"),
tableOutput("tradeTargets"),
HTML("<h4>Top valued bench players (Season ECR and Dynasty ECR is outside starting range)</h4>"),
tableOutput("tradeAway"),
HTML("<h4>Top valued Free agents</h4>"),
tableOutput("topFreeAgents")
)
)
server <- function(input, output) {
rosters <- rosters %>%
left_join(player_counts, by = c("pos.x" = "pos")) %>%
group_by(pos.x) %>%
mutate(league_pos_rank = rank(desc(value_2qb), na.last = TRUE, ties.method= "min")) %>%
ungroup() %>%
mutate(pos_starters_league = count*length(teams)) %>%
mutate(pos_starters_team = count) %>%
group_by(pos.x,franchise_name) %>%
mutate(roster_pos_rank = rank(desc(value_2qb), na.last = TRUE, ties.method= "min"))
players_included <- rosters
output$graph <- renderPlot({
if(input$startersOnly){
players_included <- players_included %>%
filter(roster_pos_rank <= count)
}
roster_pos_values <- players_included %>%
summarise(pos_value=sum(value_2qb, na.rm=TRUE))
selected_roster <- roster_pos_values %>%
filter(franchise_name == input$team)
worst <- roster_pos_values %>%
group_by(pos.x) %>%
summarise(franchise_name="Worst", pos_value=min(pos_value))
best <- roster_pos_values %>%
group_by(pos.x) %>%
summarise(franchise_name="Best", pos_value=max(pos_value))
ggplot(selected_roster) +
geom_bar( aes(x=pos.x, y=pos_value), stat="identity", fill="skyblue", alpha=0.7) +
xlab("Position") + ylab("Total Value") +
geom_errorbar( aes(x=worst$pos.x, ymin=worst$pos_value, ymax=best$pos_value), width=0.4, colour="orange", alpha=0.9, size=1.3)
})
output$tradeTargets = renderTable({
rosterRanks <- rosters %>%
filter(franchise_name == input$team) %>%
group_by(pos.x) %>%
filter(roster_pos_rank <= count) %>%
summarise(worstStarter=max(pos_ecr))
potentialTradeTargets <- rosters %>%
left_join(rosterRanks, by = c("pos.x" = "pos.x")) %>%
filter(franchise_name != input$team) %>%
filter(pos_ecr <= pos_starters_league) %>%
filter(roster_pos_rank > pos_starters_team) %>%
filter(pos_ecr < worstStarter) %>%
select(franchise_name, player_name, team, age, value_2qb, pos_ecr,dyn_pos_ecr)
return(potentialTradeTargets)
})
output$tradeAway = renderTable({
rosterRanks <- rosters %>%
filter(franchise_name == input$team) %>%
filter(dyn_pos_ecr > pos_starters_league) %>%
filter(pos_ecr > pos_starters_league) %>%
arrange(-value_2qb) %>%
head(5) %>%
select(franchise_name, player_name, team, age, value_2qb, pos_ecr,dyn_pos_ecr)
return(rosterRanks)
})
output$topFreeAgents = renderTable({
topFreeAgents <- free_agents %>%
arrange(-value_2qb) %>%
head(10)
return(topFreeAgents)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ffscrapr)
library(tidyverse)
library(ggrepel)
#remotes::install_github("dynastyprocess/fpscrapr")
library(fpscrapr)
player_counts <- tibble(pos = c("QB","RB","WR","TE"), count = c(2,3,3,2))
fpRanks <- fp_rankings(page = "consensus-cheatsheets", sport = "nfl") %>%
mutate(pos_ecr = as.integer(gsub(".*?([0-9]+).*", "\\1", pos_rank))  ) %>%
select(player_id, pos_ecr)
dynEcr <- fp_rankings(page = "dynasty-overall", sport = "nfl") %>%
mutate(dyn_pos_ecr = as.integer(gsub(".*?([0-9]+).*", "\\1", pos_rank))  ) %>%
select(player_id, dyn_pos_ecr)
sleeper_league_id <- 649923060580864000
player_values <- dp_values("values-players.csv") %>%
left_join(dp_playerids(), by = c("fp_id" = "fantasypros_id"))
league <- sleeper_connect(season = 2021, league_id = sleeper_league_id)
rosters <- ff_rosters(league) %>%
left_join(player_values, by = c("player_id"="sleeper_id")) %>%
mutate(fp_id = as.integer(fp_id)) %>%
left_join(fpRanks, by = c("fp_id"="player_id")) %>%
left_join(dynEcr, by = c("fp_id"="player_id")) %>%
select(player_id, franchise_name, player_name, team, age, pos.x, value_2qb, pos_ecr, dyn_pos_ecr)
free_agents <- sleeper_players() %>%
filter(pos %in% player_counts$pos) %>%
left_join(player_values, by = c("player_id"="sleeper_id")) %>%
select(player_id, player_name, pos.x, age, value_2qb, ecr_2qb, ecr_pos) %>%
filter(!is.na(value_2qb)) %>%
filter(!player_id %in% rosters$player_id)
teams <- unique(rosters$franchise_name)
ui <- fluidPage(
titlePanel("Dynasty Positional Value vs Rest of League"),
verticalLayout(
HTML("<h4>Total value in position on roster (with league min and max)</h4>"),
selectInput("team", "Team", choices = teams, multiple = FALSE),
checkboxInput("startersOnly", "Starters Only", value = FALSE),
plotOutput("graph"),
HTML("<h4>Bench players in the league who could start for you this year</h4>"),
tableOutput("tradeTargets"),
HTML("<h4>Top valued bench players (Season ECR and Dynasty ECR is outside starting range)</h4>"),
tableOutput("tradeAway"),
HTML("<h4>Top valued Free agents</h4>"),
tableOutput("topFreeAgents")
)
)
server <- function(input, output) {
rosters <- rosters %>%
left_join(player_counts, by = c("pos.x" = "pos")) %>%
group_by(pos.x) %>%
mutate(league_pos_rank = rank(desc(value_2qb), na.last = TRUE, ties.method= "min")) %>%
ungroup() %>%
mutate(pos_starters_league = count*length(teams)) %>%
mutate(pos_starters_team = count) %>%
group_by(pos.x,franchise_name) %>%
mutate(roster_pos_rank = rank(desc(value_2qb), na.last = TRUE, ties.method= "min"))
players_included <- rosters
output$graph <- renderPlot({
if(input$startersOnly){
players_included <- players_included %>%
filter(roster_pos_rank <= count)
}
roster_pos_values <- players_included %>%
summarise(pos_value=sum(value_2qb, na.rm=TRUE))
selected_roster <- roster_pos_values %>%
filter(franchise_name == input$team)
worst <- roster_pos_values %>%
group_by(pos.x) %>%
summarise(franchise_name="Worst", pos_value=min(pos_value))
best <- roster_pos_values %>%
group_by(pos.x) %>%
summarise(franchise_name="Best", pos_value=max(pos_value))
ggplot(selected_roster) +
geom_bar( aes(x=pos.x, y=pos_value), stat="identity", fill="skyblue", alpha=0.7) +
xlab("Position") + ylab("Total Value") +
geom_errorbar( aes(x=worst$pos.x, ymin=worst$pos_value, ymax=best$pos_value), width=0.4, colour="orange", alpha=0.9, size=1.3)
})
output$tradeTargets = renderTable({
rosterRanks <- rosters %>%
filter(franchise_name == input$team) %>%
group_by(pos.x) %>%
filter(roster_pos_rank <= count) %>%
summarise(worstStarter=max(pos_ecr))
potentialTradeTargets <- rosters %>%
left_join(rosterRanks, by = c("pos.x" = "pos.x")) %>%
filter(franchise_name != input$team) %>%
filter(pos_ecr <= pos_starters_league) %>%
filter(roster_pos_rank > pos_starters_team) %>%
filter(pos_ecr < worstStarter) %>%
select(franchise_name, player_name, team, age, value_2qb, pos_ecr,dyn_pos_ecr)
return(potentialTradeTargets)
})
output$tradeAway = renderTable({
rosterRanks <- rosters %>%
filter(franchise_name == input$team) %>%
filter(dyn_pos_ecr > pos_starters_league) %>%
filter(pos_ecr > pos_starters_league) %>%
arrange(-value_2qb) %>%
head(5) %>%
select(franchise_name, player_name, team, age, value_2qb, pos_ecr,dyn_pos_ecr)
return(rosterRanks)
})
output$topFreeAgents = renderTable({
topFreeAgents <- free_agents %>%
arrange(-value_2qb) %>%
head(10)
return(topFreeAgents)
})
}
shinyApp(ui = ui, server = server,options = list(height = 500))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_dir("./content")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_dir("./content")
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_dir("./content/apps")
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_dir("./content/apps")
blogdown::build_dir("./content/apps")
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_dir("./content/apps")
blogdown:::serve_site()
blogdown::build_dir("./content/apps")
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_dir("./content/apps")
blogdown:::serve_site()
blogdown::build_dir("./content/apps")
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_dir("./content/apps")
blogdown:::serve_site()
library(widgetframe)
library(widgetframe)
library(shiny)
library(widgetframe)
library(shiny)
blogdown:::serve_site()
blogdown::build_dir("./content/apps")
blogdown::build_site()
blogdown:::serve_site()
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "100%")
library(knitr)
library(shiny)
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "100%")
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "100%")
knitr::include_app('https://christyc92.shinyapps.io/positional-strength/', height = '100%')
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height="100%")
knitr::include_app("https://yihui.shinyapps.io/miniUI/",
height = "600px")
library(knitr)
library(shiny)
knitr::include_app("https://yihui.shinyapps.io/miniUI/",
height = "600px")
install. packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::include_app("https://yihui.shinyapps.io/miniUI/",
height = "600px")
library(knitr)
library(shiny)
knitr::include_app("https://yihui.shinyapps.io/miniUI/",
height = "600px")
knitr::include_app("https://yihui.shinyapps.io/miniUI/",
height = "600px")
```{R include=FALSE}
library(knitr)
library(shiny)
knitr::include_app("https://yihui.shinyapps.io/miniUI/",
height = "600px")
knitr::include_app("https://yihui.shinyapps.io/miniUI/",
height = "600px")
knitr::include_app("https://yihui.shinyapps.io/miniUI/", height = "600px")
library(knitr)
library(shiny)
knitr::include_app("https://yihui.shinyapps.io/miniUI/", height = "600px")
blogdown::build_dir("./content/apps")
blogdown::build_site()
blogdown::serve_site()
knitr::include_app("https://yihui.shinyapps.io/miniUI/", height = "600px")
knitr::include_app("https://yihui.shinyapps.io/miniUI/", height = "600px")
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
blogdown::build_dir("./content/apps")
blogdown::build_site()
blogdown::serve_site()
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
xfun::session_info('knitr')
install.packages(c("BiocManager", "broom", "callr", "caTools", "cli", "cpp11", "dbplyr", "devtools", "gert", "gh", "packrat", "pkgload", "processx", "remotes", "reprex", "RSQLite", "sparklyr", "spatstat", "spatstat.linnet", "tinytex", "vctrs"))
install.packages(c("BiocManager", "broom", "callr", "caTools", "cli", "cpp11", "dbplyr", "devtools", "gert", "gh", "packrat", "pkgload", "processx", "remotes", "reprex", "RSQLite", "sparklyr", "spatstat", "spatstat.linnet", "tinytex", "vctrs"))
library(knitr)
library(shiny)
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
update.packages(ask = FALSE)
update.packages(ask = FALSE)
library(knitr)
library(shiny)
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
knitr::include_url("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
library(knitr)
library(shiny)
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
sessionInfo()
library(knitr)
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
update.packages(ask = FALSE)
update.packages()
update.packages()
update.packages()
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
knitr::include_app("https://christyc92.shinyapps.io/positional-strength/", height = "600px")
knitr::include_app("https://christyc92.shinyapps.io/positional-strength", height = "600px")
update.packages(ask = FALSE, checkBuilt = TRUE)
knitr::include_app('https://christyc92.shinyapps.io/positional-strength', height = '600px')
devtools::install_github('rstudio/htmltools#96')
devtools::install_github('rstudio/htmltools#96')
library(remotes)
remotes::install_github("rstudio/htmltools")
knitr::include_app('https://christyc92.shinyapps.io/positional-strength', height = '600px')
knitr::include_app('https://christyc92.shinyapps.io/positional-strength', height = '600px')
